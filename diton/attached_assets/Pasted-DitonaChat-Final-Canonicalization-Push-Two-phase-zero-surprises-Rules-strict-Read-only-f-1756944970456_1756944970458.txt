DitonaChat — Final Canonicalization & Push (Two-phase, zero-surprises)

Rules (strict):

Read-only first, then execute.

Idempotent scripts.

No force-push. Back up to _ops/backups/<label>_<UTC>/… before any change.

Print an -- Acceptance -- block at the end of every phase.

Keep main untouched; work on a new branch and open a PR.

Phase A — Read-only Census & Reconcile Plan

Goal: find the one true application root and produce a merge plan.

Do:

Scan repo for candidate app roots = folders that have package.json and src/app:

Include likely paths:
./ditonachat_restored_*, ./ditonachat-clean/DitonaChat, ./ditona-sync, ./ (root)

Exclude: .git/, node_modules/, .next/, dist/, _ops/, attached_assets/, ARCHIVE_OLD/, any cache.

For each candidate collect:

name, mtime, files_count(src), hash(package.json first8), presence of:
src/components/chat/ChatMessages.tsx (slice(-3)),
src/utils/media-bridge.ts (H=80, V=50),
src/utils/webrtc.ts (busEmit('next')),
src/components/chat/PeerMeta.tsx and its mount in src/app/chat/ChatClient.tsx,
src/data/countries.ts (count ≥ 247),
6 legal pages terms/privacy/dmca/content/abuse/2257,
public/hero.webp.webp usage on Home.

API dirs: src/app/api/_health, monitoring/metrics, turn, stripe/{prices,subscribe,portal,webhook}, age/allow.

Diff the top two candidates (by mtime & completeness). If one contains Agent fixes (e.g. PeerMeta, legal pages, hero) and الآخر يحتوي على أجزاء ناقصة، اقترح Canonical Root = الأحدث والأكمل، مع قائمة العناصر التي يجب استيرادها من الآخر (إن وجدت).

Emit a plan with reasons.

Acceptance (must print):

-- Acceptance --
PHASE=A_CENSUS
CANDIDATES=[{dir,mtime,src_files,has_peerMeta,peerMeta_mounted,has_countries:count,legal_pages:count,hero:0/1,endpoints:8/8}, ...]
PROPOSED_CANONICAL=<path>
MERGE_FROM=[<optional source paths or NONE>]
RISKS=NONE
NOTES=read-only; no files changed
-- End Acceptance --

Phase B — Execute Safely (Snapshot → Verify → Build → Branch+PR)

Do:

Snapshot (copy-only):

Create <SNAP>=_ops/exports/canonical_snapshot_<UTC>/ with only:

src/, public/ (if exists), package.json, tsconfig.json, next.config.mjs, next-env.d.ts.

If public/hero.webp.webp missing but exists in attached_assets/, copy it.

Merge in any missing items from MERGE_FROM (Phase A): PeerMeta.tsx, its mount in ChatClient.tsx, countries.ts, 6 legal pages, thresholds, busEmit lines, etc.

Do not bring .next, dist, node_modules, backups.

Verify (read-only on SNAP): assert:

ChatMessages uses slice(-3) (report line).

media-bridge.ts: H=80, V=50 (report “H80:1 V50:1”).

webrtc.ts: lines containing busEmit('next') (list line numbers).

PeerMeta.tsx exists and mounted in ChatClient.tsx with overlay bottom-left showing country · city · gender (male ♂, female ♀, couple 💞, LGBT 🌈, unknown •).

countries.ts count ≥ 247 (include XK; ignore KP/GS/MV per owner preference).

6 legal pages exist.

Home uses bg-[url('/hero.webp.webp')] bg-cover bg-center bg-no-repeat.

All API endpoints present.

Build (optional but recommended): inside SNAP, using npm (not pnpm):

npm ci || npm install

npm run build

Capture build rc and pages list; fail the phase if Next.js route duplication is detected (e.g., both /legal/... and root /... for the same page). If found, dedupe by keeping one path only (prefer root src/app/terms/page.tsx etc.) and re-build.

Branch & PR (no force):

New branch: canonical-<UTC>.

Backup current root into _ops/backups/repo_flatten_<UTC>/ (copy, not delete).

Move SNAP contents to repo root (replace existing root src/ safely; if collisions, back up the conflicting root files under the backup dir, then proceed).

Ensure .gitignore has: .env, .env.local, .next/, dist/, _ops/artifacts/, _ops/backups/, node_modules/.

Commit & push -u origin <branch>.

Open PR to main.

Acceptance (must print):

-- Acceptance --
PHASE=B_EXECUTE
SNAPSHOT_DIR=_ops/exports/canonical_snapshot_<UTC>
KEY_FILES=page.tsx:1,ChatClient.tsx:1,ChatMessages.tsx:1,media-bridge.ts:1,webrtc.ts:1,PeerMeta.tsx:1,countries.ts:1
CHECKS=slice(-3):<line>,H80:1,V50:1,auto-next-lines:<l1,l2,...>,PeerMetaMounted:1
LEGAL_PAGES=terms:1 privacy:1 dmca:1 content:1 abuse:1 2257:1
HERO_PRESENT=1
ENDPOINTS=/_health:1,/api/monitoring/metrics:1,/api/turn:1,/api/stripe/prices:1,/api/stripe/subscribe:1,/api/stripe/portal:1,/api/age/allow:1,/api/stripe/webhook:1
BUILD_RC=<0/1> BUILD_NOTES=<dedup if any>
BRANCH=<canonical-UTC> PR_URL=<link>
NOTES=No force; backups stored under _ops/backups
-- End Acceptance --


Success criteria:

PR shows project at repo root with src/, package.json, next.config.mjs, tsconfig.json, public/hero.webp.webp.

All checks = 1, build rc = 0, no duplicate routes.

No removal of _ops/backups or historical folders; only ignored by Git.