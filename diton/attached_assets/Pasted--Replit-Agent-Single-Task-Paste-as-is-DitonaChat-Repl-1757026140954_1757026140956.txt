🛠️ Replit Agent — Single Task (Paste-as-is)

المهمة: جَهّز مشروع DitonaChat من وضعه الحالي على Replit حتى يصبح جاهزًا للرفع على GitHub ثم النشر على Vercel (بدون رفع الآن). نفّذ كل شيء داخل الجذر فقط: /home/runner/workspace.

قواعد عامة (إلزامية):

جذر واحد: اعمل حصريًا داخل /home/runner/workspace. لا تُنشئ “جُزر” جديدة خارج هذا المسار.

نسخة احتياطية قبل أي تعديل: أنشئ نسخة: _ops/backups/bringup_<UTC>/ (بدون node_modules).

سرّية: لا تطبع القيم السرّية من .env في السجلات أو التقارير.

أقل تكلفة تشغيلية: نفّذ الخطوات مرة واحدة بتسلسل؛ أصلِح الأعطال ذاتيًا ضمن نفس الجلسة.

1) التحقق والتنظيف

اطبع: pwd && ls -la وتأكد أنك في /home/runner/workspace.

إن وجدت محتوى المشروع في مجلد فرعي (مثل ditonachat-clean/...) انقل الملفات اللازمة إلى الجذر بحيث تصبح الشجرة الوحيدة هي:

package.json, pnpm-lock.yaml, next.config.*, tailwind.config.js, postcss.config.js, tsconfig.json, src/**, public/**, .gitignore, .env*, _ops/**

أنشئ نسخة احتياط:

mkdir -p _ops/backups/bringup_<UTC>

انسخ الكود (بدون node_modules): tar --exclude=node_modules -czf _ops/backups/bringup_<UTC>/src_backup.tgz .

افحص وجود الملفات/المجلدات الحرجة (إن نقصت فابحث عنها داخل أي مجلدات أرشيف/نسخ داخل المشروع ثم أعدها لمواضعها):

src/app/chat/ChatClient.tsx, src/components/chat/ChatMessages.tsx, src/utils/media-bridge.ts

src/state/filters.ts, src/components/filters/**, src/data/genders.ts, src/data/countries.ts

APIs: src/app/api/_health/route.ts, src/app/api/user/vip-status/route.ts, src/app/api/stripe/**, src/app/api/age/allow/route.ts, src/app/api/turn/route.ts

2) البيئة والاعتماديات

إن لم يوجد .env في الجذر، أنشئ .env اعتمادًا على القيم المتاحة داخليًا (اترك placeholders إن لزم). أسماء مطلوبة:
GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, STRIPE_PRICE_ID_EUR_149, STRIPE_PRICE_ID_EUR_599, STRIPE_PRICE_ID_EUR_1699, STRIPE_PRICE_ID_EUR_9999, TURN_URL, TURN_USERNAME, TURN_PASSWORD, NEXTAUTH_URL, NEXTAUTH_SECRET

ثبّت الاعتماديات:

فعّل pnpm (إن لزم): corepack enable && corepack prepare pnpm@latest --activate

pnpm install

3) بناء وإصلاح ذاتي

ابنِ: pnpm run build

إذا فشل:

لأخطاء Module not found: ابحث عن الملف المفقود داخل مساحة العمل (وأي مجلدات أرشيف تحت _ops/) وأعده لمساره الصحيح ضمن src/** ثم أعد البناء.

لأخطاء Tailwind/الأنماط: تأكد من وجود tailwind.config.js بمسارات محتوى صحيحة (./src/**/*.{js,ts,jsx,tsx}) وأن globals.css مستورد في src/app/layout.tsx.

كرر حتى ترى Compiled successfully.

4) تشغيل إنتاجي محلي + فحوص API

شغّل: PORT=3000 pnpm start (أو استخدم منفذ Replit إن فُرض).

اختبر سريعًا (استبدل 3000 بمنفذك الفعلي إن لزم):

curl -sS -o /dev/null -w "%{http_code}\n" http://127.0.0.1:3000/api/_health → يجب 200

curl -I http://127.0.0.1:3000/ → 200

curl -I http://127.0.0.1:3000/plans → 200

curl -I http://127.0.0.1:3000/chat → 200 أو 302 (مقبول بسبب Age/Auth)

(اختياري) curl -I http://127.0.0.1:3000/api/stripe/prices → تحقق عدم 5xx

5) فحص بصري/وظيفي مختصر

افتح المعاينة (Preview) وتحقق:

الصفحة الرئيسية بتنسيق Tailwind (ألوان/تباعد ظاهر).

/chat: وجود شريط الأدوات السفلي، ظهور FilterBar أعلى يمين القسم العلوي (حتى لو كانت محدودة للضيف)، عدم وجود أخطاء Console ظاهرة.

Upsell عند محاولة ميزة VIP (إن كانت مفعّلة).

إن ظهرت مشكلة بصرية بسبب CSS غير مُحمّل، راجع استيراد CSS و tailwind config ثم أعد build/start ضمن هذه الجلسة.

6) تسليم تقرير نهائي داخل المشروع

أنشئ ملف تقرير: FINAL_REPORT.md في الجذر يتضمن:

ما تم فعله خطوة بخطوة (تنظيف/استرجاع ملفات/تعديلات).

نتيجة البناء والتشغيل مع مقتطفات (مثل “Compiled successfully” وكود حالة /api/_health).

ملخص الفحص البصري والوظيفي (نقاط نجاح/أي ملاحظات).

تأكيد الجاهزية للرفع على GitHub ثم Vercel (وما الذي سيتطلب مفاتيح فعلية عند النشر).

دون كشف أسرار.

وفي نهاية الملف، أدرج بلوك قبول مختصر:

-- Acceptance --
BUILD=ok
API=/api/_health:200 /:200 /plans:200 /chat:200|302
VISUAL=Tailwind applied; FilterBar visible; no console errors
REPORT=/home/runner/workspace/FINAL_REPORT.md
NOTES=Ready for GitHub push and Vercel import
-- End Acceptance --


أوقف الخادم بعد إنشاء التقرير.