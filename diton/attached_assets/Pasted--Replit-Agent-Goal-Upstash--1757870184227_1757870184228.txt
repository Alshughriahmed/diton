دفعة واحدة للوكيل Replit Agent (أشمل، تقلّل التكلفة)

Goal: تثبيت تخزين القياسات في Upstash + تقوية قبول E2E + نقطة تشخيص آمنة.
Constraints: Minimal-Diff. لا تغيير سلوك RTC/ UI.

0) Preconditions

توفّر Secrets:
UPSTASH_REDIS_REST_URL, UPSTASH_REDIS_REST_TOKEN
(موجودة أصلًا لمنظومة RTC؛ فقط تأكد رؤيتها للـroute)

لا مهام أخرى قيد التنفيذ.

1) Patch — API debug خفيف للقياس

File: src/app/api/monitoring/metrics/route.ts

@@
-import { NextResponse } from 'next/server';
-export const runtime = 'nodejs';
+import { NextResponse } from 'next/server';
+export const runtime = 'nodejs';
@@
 const URL = process.env.UPSTASH_REDIS_REST_URL;
 const TOKEN = process.env.UPSTASH_REDIS_REST_TOKEN;
@@
 export async function POST(req: Request) {
   try {
     const m = await req.json().catch(() => ({} as any));
@@
     const res = await store(allowed);
     return NextResponse.json({ ok: true, ...res }, { status: 200 });
   } catch {
     return NextResponse.json({ ok: false }, { status: 200 });
   }
 }
+
+// Debug endpoint (safe): presence only, no values
+export async function GET() {
+  return NextResponse.json({
+    ok: true,
+    env: {
+      upstash_url: !!process.env.UPSTASH_REDIS_REST_URL,
+      upstash_token: !!process.env.UPSTASH_REDIS_REST_TOKEN,
+    }
+  }, { status: 200 });
+}

2) Patch — rtcFlow (لا يمس المنطق، فقط قياس آمن)

إن لم تُطبق سابقًا قراءة TURNS:443 من الـPeer نفسه.
File: src/app/chat/rtcFlow.ts

@@
-import { sendRtcMetrics, type RtcMetrics } from '@/utils/metrics';
+import { sendRtcMetrics, type RtcMetrics } from '@/utils/metrics';
@@
 function hasTurns443FromPc(pc: RTCPeerConnection | null | undefined): boolean {
   try {
     const cfg = pc?.getConfiguration?.();
     const arr = Array.isArray(cfg?.iceServers) ? cfg!.iceServers : [];
     for (const s of arr) {
       const urls = Array.isArray((s as any).urls) ? (s as any).urls : [(s as any).urls];
       if (urls?.some((u: string) => /^turns:.*:443(\?|$)/i.test(String(u)))) return true;
     }
   } catch {}
   return false;
 }

3) Scripts — قبول شامل موحّد

File: _ops/acc_full.sh

#!/usr/bin/env bash
set -euo pipefail
BASE="${1:?usage: $0 BASE_URL}"

echo "== sanity =="
curl -s "$BASE/api/rtc/env" | jq .
curl -s "$BASE/api/turn" | jq '{tls443:([.iceServers[].urls]|flatten|map(tostring)|map(contains(":443"))|any)}'
curl -s "$BASE/api/monitoring/metrics" | jq . || true

echo "== metrics probe =="
json='{"ts":'"$(date +%s000)"',"sessionId":"acc-'$(openssl rand -hex 6 2>/dev/null || echo abcd)'","matchMs":1200,"ttfmMs":800,"iceOk":true,"iceTries":1,"turns443":true}'
out="$(curl -sS -X POST "$BASE/api/monitoring/metrics" -H 'content-type: application/json' -d "$json")"
m_ok="$(echo "$out" | sed -n 's/.*"ok":\([^,}]*\).*/\1/p')"
m_stored="$(echo "$out" | sed -n 's/.*"stored":\([^,}]*\).*/\1/p')"

echo "== rtc acceptance =="
WAIT_MS=500
A=$(mktemp); B=$(mktemp)
curl -s -c "$A" -b "$A" "$BASE/api/anon/init" >/dev/null
sleep 0.2
curl -s -c "$B" -b "$B" "$BASE/api/anon/init" >/dev/null
curl -s -o /dev/null -w "%{http_code}\n" -c "$A" -b "$A" -H 'content-type: application/json' -d '{}' "$BASE/api/rtc/enqueue"
sleep "$(awk -v w=$WAIT_MS 'BEGIN{print w/1000}')"
curl -s -o /dev/null -w "%{http_code}\n" -c "$B" -b "$B" -H 'content-type: application/json' -d '{}' "$BASE/api/rtc/enqueue"

Pa="$(curl -s -c "$A" -b "$A" -H 'content-type: application/json' -d '{}' "$BASE/api/rtc/matchmake")"
Pb="$(curl -s -c "$B" -b "$B" -H 'content-type: application/json' -d '{}' "$BASE/api/rtc/matchmake")"
pidA="$(echo "$Pa" | jq -r '.pairId // .pair_id')"
pidB="$(echo "$Pb" | jq -r '.pairId // .pair_id')"
roleA="$(echo "$Pa" | jq -r '.role')"
roleB="$(echo "$Pb" | jq -r '.role')"
same_pid=$([ "$pidA" = "$pidB" ] && echo 1 || echo 0)
good_roles=$([ "$roleA" = "caller" -a "$roleB" = "callee" -o "$roleA" = "callee" -a "$roleB" = "caller" ] && echo 1 || echo 0)

# quick offer/answer/ice probe (dummy paths if implemented)
# هنا نفترض أن الـacceptance الأصلي موجود كـ _ops/acc_rtc.sh ونستدعيه إن وُجد:
if [ -x "_ops/acc_rtc.sh" ]; then
  RC=$(bash _ops/acc_rtc.sh "$BASE" >/dev/null 2>&1; echo $?)
else
  RC=0
fi

echo "-- Acceptance --"
echo "RTC_MODE=$(curl -s "$BASE/api/rtc/env" | jq -r '.mode')"
echo "RTC_PING_OK=$(curl -s "$BASE/api/rtc/env" | jq -r '.ping_ok // .pingOk // false' | sed 's/true/1/;s/false/0/')"
echo "TURN_TLS443_PRESENT=$(curl -s "$BASE/api/turn" | jq -r '([.iceServers[].urls]|flatten|map(tostring)|map(contains(\":443\"))|any) | if . then 1 else 0 end')"
echo "TURN_CREDENTIAL_PRESENT=$(curl -s "$BASE/api/turn" | jq -r '([.iceServers[]|select(.credential!=null) ]|length) | if . > 0 then 1 else 0 end')"
echo "PAIR_ID_MATCH=$same_pid"
echo "NO_403_ON_RTC=$([ $RC -eq 0 ] && echo 1 || echo 0)"
echo "METRICS_API_OK=$m_ok"
echo "METRICS_STORED=$m_stored"
echo "-- End Acceptance --"

4) Build & Run
pnpm install --frozen-lockfile
pnpm build
# (dev إن لزم للاختبار)
pnpm dev -p ${PORT:-3000} -H 0.0.0.0

5) Acceptance
bash _ops/acc_full.sh "https://$REPLIT_DEV_DOMAIN"
# أو Prod: bash _ops/acc_full.sh https://www.ditonachat.com

6) Commit

رسالة: chore(metrics): ensure Upstash visibility + add GET debug + full acceptance