๐ฏ ูููุฉ ุงููููู (Shell ููุท โ ุจุฏูู ุชุนุฏูู ููุฏ)

ุงููุฏู: ุฅุซุจุงุช ุนูู โPrev VIPโ ูู ุทุฑู ูุงุญุฏ ุจุดูู End-to-Endุ ููุฑุงุกุฉ ููุงุชูุญ Redis ููุฑ ูุชุงุจุชูุงุ ูุฅุฎุฑุงุฌ ุชูุฑูุฑ ููุงุฆู ูุงุญุฏ ุดุงูู.

1) ุฃูุดุฆ ุณูุฑุจุช ุงููุญุต ุงูุดุงูู

ุฃูุดุฆ ุงูููู: _ops/bin/100_prev_vip_audit.sh

bash -lc 'set -Eeuo pipefail
mkdir -p _ops/bin _ops/reports _ops/logs
TS="$(date -u +%Y%m%d-%H%M%S)"
REP="_ops/reports/prev_vip_final_${TS}.log"

PORT="${PORT:-3000}"
BASE="http://127.0.0.1:${PORT}"
URL="${UPSTASH_REDIS_REST_URL:-}/pipeline"
TOK="${UPSTASH_REDIS_REST_TOKEN:-}"

log(){ echo "$@" | tee -a "$REP"; }

# 0) ุตุญูุฉ ุงูุฎุฏูุฉ
H="$(curl -s -o /dev/null -w "%{http_code}" "$BASE/api/health" || echo 000)"
if [ "$H" != 200 ]; then
  nohup pnpm dev -p "$PORT" -H 0.0.0.0 >_ops/logs/dev.log 2>&1 & disown
  sleep 8
  H="$(curl -s -o /dev/null -w "%{http_code}" "$BASE/api/health" || echo 000)"
fi
log "HEALTH=$H"

# 1) ูููู ุฌูุณุชูู ุญููููุชูู
get_cookie(){ curl -sS -D - -o /dev/null "$BASE/api/anon/init" | awk "/^[Ss]et-[Cc]ookie:/ {print \$2}" | head -n1 | sed "s/;.*//"; }
CKA="$(get_cookie)"; CKB="$(get_cookie)"
log "CKA=${CKA:-EMPTY}"
log "CKB=${CKB:-EMPTY}"

# 2) ุฅุฏุฑุงุฌ ุนุจุฑ API (ูุง ุชุนุฏูู ูููุงุช)
curl -s -X POST "$BASE/api/rtc/enqueue" -H "Cookie: $CKA" -H "content-type: application/json" \
  -d "{\"gender\":\"male\",\"country\":\"DE\",\"genders\":\"all\",\"countries\":\"ALL\"}" >/dev/null
curl -s -X POST "$BASE/api/rtc/enqueue" -H "Cookie: $CKB" -H "content-type: application/json" \
  -d "{\"gender\":\"female\",\"country\":\"DE\",\"genders\":\"all\",\"countries\":\"ALL\"}" >/dev/null

# 3) ูุทุงุจูุฉ ุฃููู ููุทุฑู A
MM1="$(curl -s -o /tmp/mm1.json -w "%{http_code}" -X POST "$BASE/api/rtc/matchmake" -H "Cookie: $CKA" -H "content-type: application/json" -d "{}" || echo 000)"
PAIR1="$(sed -nE "s/.*\"pairId\":\"([^\"]+)\".*/\1/p" /tmp/mm1.json)"
PEER_B="$(sed -nE "s/.*\"peerAnonId\":\"([^\"]+)\".*/\1/p" /tmp/mm1.json)"
log "MM1=$MM1  PAIR1=${PAIR1:-}  PEER_B=${PEER_B:-}"

# ุฅุนุงุฏุฉ ุฅุฏุฑุงุฌ B
curl -s -X POST "$BASE/api/rtc/enqueue" -H "Cookie: $CKB" -H "content-type: application/json" \
  -d "{\"gender\":\"female\",\"country\":\"DE\",\"genders\":\"all\",\"countries\":\"ALL\"}" >/dev/null

# 4) ุทูุจ Prev ูู A ูู VIP (ููุฑูุง)
P200="$(curl -s -o /dev/null -w "%{http_code}" -H "Cookie: $CKA; vip=1" -H "x-ditona-prev: 1" "$BASE/api/match/next" || echo 000)"
log "PREV_HTTP=$P200"

# 5) ูุทุงุจูุฉ ุซุงููุฉ ูู B (ูุชููุน callee + peerAnonId = UUID A)
MM2="$(curl -s -o /tmp/mm2.json -w "%{http_code}" -X POST "$BASE/api/rtc/matchmake" -H "Cookie: $CKB" -H "content-type: application/json" -d "{}" || echo 000)"
ROLE2="$(sed -nE "s/.*\"role\":\"([^\"]+)\".*/\1/p" /tmp/mm2.json)"
PEER_A="$(sed -nE "s/.*\"peerAnonId\":\"([^\"]+)\".*/\1/p" /tmp/mm2.json)"
log "MM2=$MM2  ROLE2=${ROLE2:-}  PEER_A=${PEER_A:-}"

# 6) ูุญุต Redis ููุฑูุง (ูุจู ุงููุถุงุก TTL ~7โ9s)
if [ -n "${UPSTASH_REDIS_REST_URL:-}" ] && [ -n "$TOK" ] && [ -n "${PEER_A:-}" ] && [ -n "${PEER_B:-}" ]; then
  AUTH="Authorization: Bearer $TOK"
  PAY_PREV="[ [\"EXISTS\",\"rtc:prev-wish:${PEER_A}\"],[\"EXISTS\",\"rtc:prev-for:${PEER_B}\"] ]"
  PAY_LAST="[ [\"EXISTS\",\"rtc:last:${PEER_A}\"],[\"EXISTS\",\"rtc:last:${PEER_B}\"] ]"
  EXPREV="$(curl -sS -X POST "$URL" -H "$AUTH" -H "content-type: application/json" -d "$PAY_PREV")"
  EXLAST="$(curl -sS -X POST "$URL" -H "$AUTH" -H "content-type: application/json" -d "$PAY_LAST")"
  log "EXPREV=$EXPREV"
  log "EXLAST=$EXLAST"

  # Snapshot KEYS+TTL (ุงุฎุชูุงุฑู)
  SNAP="$(cat <<J
[
 ["SCAN","0","MATCH","rtc:prev-*","COUNT","50"],
 ["SCAN","0","MATCH","rtc:last:*","COUNT","50"]
]
J
)"
  KEYS_JSON="$(curl -sS -X POST "$URL" -H "$AUTH" -H "content-type: application/json" -d "$SNAP")"
  log "KEYS_SNAPSHOT=$KEYS_JSON"
else
  log "UPSTASH_ENV=ABSENT_OR_IDS_MISSING"
fi

# 7) ูุจูู ููุงุฆู
ok_prev="$(echo "${EXPREV:-}" | grep -o "\"result\":[01]" | grep -o "[01]" | tr -d "\n" || true)"
ok_last="$(echo "${EXLAST:-}" | grep -o "\"result\":[01]" | grep -o "[01]" | tr -d "\n" || true)"

echo >>"$REP"; log "-- Acceptance --"
log "INITIAL_PAIR_OK=$([ -n "$PAIR1" ] && [ "$MM1" = 200 ] && echo 1 || echo 0)"
log "RECONNECT_OK=$([ "$MM2" = 200 ] && [ "$ROLE2" = callee ] && [ -n "$PEER_A" ] && echo 1 || echo 0)"
log "VIP_PREV_ENFORCED=$([ "$P200" = 200 ] && echo 1 || echo 0)"
[ -n "$ok_prev" ] && log "PREV_KEYS_WRITTEN=$([ "$ok_prev" = 11 ] && echo 1 || echo 0)" || log "PREV_KEYS_WRITTEN=NA"
[ -n "$ok_last" ] && log "LAST_KEYS_SET=$([ "$ok_last" = 11 ] && echo 1 || echo 0)" || log "LAST_KEYS_SET=NA"

echo; echo "REPORT=$REP"; echo; sed -n "1,200p" "$REP"
'

2) ูููุฐ ุงูุณูุฑุจุช ูุณููู ุงูุชูุฑูุฑ
bash _ops/bin/100_prev_vip_audit.sh


ุงููุฎุฑุฌุงุช ูุฌุจ ุฃู ุชุทุจุน ูุณุงุฑ REPORT=... ุซู ุชุนุฑุถ ุฃููู 200 ุณุทุฑ. ุฃุฑุณู ููุง ุงูุชูุฑูุฑ ูููู.

3) ุฅู ุธูุฑุช INITIAL_PAIR_OK=1 ูRECONNECT_OK=1 ูVIP_PREV_ENFORCED=1 ุจูููุง PREV/LAST = 0 ุฃู NA

ุดุบูู ุงูุชุญูู ุงููุญุธู ููููุงุชูุญ ูุงููTTL (ูุฑุงุกุฉ ููุท) ููุฑูุง ุจุนุฏ ุงูุฎุทูุฉ ุงูุณุงุจูุฉ:

bash -lc '
set -Eeuo pipefail
URL="${UPSTASH_REDIS_REST_URL:-}/pipeline"; TOK="${UPSTASH_REDIS_REST_TOKEN:-}"
[ -n "$URL" ] && [ -n "$TOK" ] || { echo "UPSTASH_ENV=ABSENT"; exit 0; }
AUTH="Authorization: Bearer $TOK"
# ุงุทุจุน ููุงุชูุญ prev/last ุงูุญุงููุฉ ูุน TTL ููู ููุชุงุญ
PAY=$(cat <<J
[
 ["SCAN","0","MATCH","rtc:prev-*","COUNT","100"],
 ["SCAN","0","MATCH","rtc:last:*","COUNT","100"]
]
J
)
echo "=== KEYS ==="
KS="$(curl -sS -X POST "$URL" -H "$AUTH" -H "content-type: application/json" -d "$PAY")"
echo "$KS"
'


ูุฐุง ูุซุจุช ุฃู ุงูุฃุตูุงุฑ (ุฅู ุธูุฑุช) ูุงูุช ุจุณุจุจ ูุงูุฐุฉ TTL ุงููุตูุฑุฉ ุฃู ุชูููุช ุงููุญุตโnot ุฎุทุฃ ูุธููู.

4) ุฅู ูุดู INITIAL_PAIR_OK=0 ุฃู RECONNECT_OK=0

ูููุฐ ููุท ูุฐุง ุงูุชุดุฎูุต (ูุง ุชุนุฏูู ูููุงุช):

bash -lc '
set -Eeuo pipefail
PORT="${PORT:-3000}"; BASE="http://127.0.0.1:${PORT}"
echo "anon/init:"; curl -sS -D - -o /dev/null "$BASE/api/anon/init" | sed -n "1,40p"
echo "---"
echo "matchmake(A):"; curl -sS -o - -w "\nHTTP=%{http_code}\n" -X POST "$BASE/api/rtc/matchmake" -H "Cookie: $(curl -sS -D - -o /dev/null "$BASE/api/anon/init" | awk "/Set-Cookie:/ {print \$2}" | head -n1 | sed "s/;.*//")" -H "content-type: application/json" -d "{}" | sed -n "1,120p"
'


ุงุฑูุน ุงููุงุชุฌ ููุง ูู ุถูู ุงูุชูุฑูุฑ.

๐ ูุนุงููุฑ ุงููุจูู ุงูููุงุฆูุฉ

INITIAL_PAIR_OK=1

RECONNECT_OK=1 ู ROLE2=callee ููุฌูุฏ peerAnonId ุตุญูุญ

VIP_PREV_ENFORCED=1

ููุทุฉ Redis ุชูุธูุฑ ููุงุชูุญ rtc:prev-* ู rtc:last:* (ูุฏ ุชูุชูู ุจุณุฑุนุฉุ ูููููุง ุฅุซุจุงุช ูุญุธู ุฃู NA ุฅุฐุง ุบุงุจุช ุจูุฆุฉ Upstash)

๐งพ ุงูุชุณููู ุงููุทููุจ ูู ุงููููู

ููู ุงูุชูุฑูุฑ: _ops/reports/prev_vip_final_<timestamp>.log

ุฅู ูุฒู: ููุทุฉ ููุงุชูุญ Redis (ุงูุฃูุฑ ูู ุฎุทูุฉ 3)

ุฅู ูุดู ุฃู ูุนูุงุฑ: ูุงุชุฌ ุชุดุฎูุต ุฎุทูุฉ 4

ููุงุญุธุงุช ูููุฉ ูุชูููู ุงูุชูููุฉ:

ูุง ุชูุฌุฑู ุฃู build ุฅุถุงูู. ููุท ุชุดุบูู dev ุฅู ูุงูุช /api/health ูุง ุชูุนูุฏ 200.

ูุง ุชูุนุฏูู ุฃู ููู ููุฏ. ูุฐู ูููุฉ ูุญุต ูุชุดุฎูุต ููุท.

ูููุฐ ุงูุฃูุงูุฑ ููุง ููุ ูุฃุฑุณู ุงููููุงุช ุงููุงุชุฌุฉ.