🚀 Agent Batch v1 — English-First + World Data + VIP Status

الصق ونفّذ بالترتيب. لا تغيّر أي شيء خارج هذه الأوامر.

0) Assert ROOT (قراءة فقط)



cat > /tmp/00_assert_root.sh <<'BASH'#!/usr/bin/env bashset -euo pipefailtrap 'echo; read -r -p "HOLD: اضغط Enter للإنهاء..." _' EXIT

ROOT="/home/runner/workspace"; cd "$ROOT"exists(){ [[ -e "$1" ]] && echo 1 || echo 0; }echo "-- Acceptance --"echo "ROOT=$(pwd)"echo "LIVE=src:$(exists src) package.json:$(exists package.json) next.config.mjs:$(exists next.config.mjs) tsconfig.json:$(exists tsconfig.json)"echo "NOTES=Read-only sanity OK"echo "-- End Acceptance --"

BASH

bash /tmp/00_assert_root.sh

1) P0 Apply — English-first + World countries + genders + vip-status API



cat > /tmp/10_p0_apply_english_world.sh <<'BASH'#!/usr/bin/env bashset -euo pipefailtrap 'echo; read -r -p "HOLD: اضغط Enter للإنهاء..." _' EXIT

ROOT="/home/runner/workspace"; cd "$ROOT"

UTC="$(date -u +%Y%m%d-%H%M%S)"

BK="_ops/backups/p0_apply_${UTC}"; mkdir -p "$BK"; changed=()upsert(){ tgt="$1"; tmp="$2"; if [[ -f "$tgt" ]]; then if cmp -s "$tgt" "$tmp"; then rm -f "$tmp"; else mkdir -p "$(dirname "$BK/$tgt")"; cp -a "$tgt" "$BK/$tgt"; mv "$tmp" "$tgt"; changed+=("$tgt"); fi else mkdir -p "$(dirname "$tgt")"; mv "$tmp" "$tgt"; changed+=("$tgt"); fi }# 1) Config stub: English-first flags (مراجع قادمة)mkdir -p src/configcat > /tmp/app.ts <<'TS'export const DEFAULT_LANG = "en";            // English-first UIexport const AUTO_TRANSLATE = false;         // يمكن تفعيله لاحقًا عبر Feature Flagexport const FREE_FOR_ALL = false;           // علم اختياري لفتح القيود مؤقتًا

TS

upsert "src/config/app.ts" /tmp/app.ts# 2) API: GET /api/user/vip-status  (JSON سليم الآن)mkdir -p src/app/api/user/vip-statuscat > /tmp/route.ts <<'TS'

import { NextResponse } from "next/server";export async function GET() {

  return NextResponse.json({ isVip: false, status: { level: "guest" } }, { status: 200 });

}

TS

upsert "src/app/api/user/vip-status/route.ts" /tmp/route.ts# 3) Data: genders (English)mkdir -p src/datacat > /tmp/genders.ts <<'TS'export const GENDERS = ["All","Male","Female","Other"] as const;export type Gender = typeof GENDERS[number];

TS

upsert "src/data/genders.ts" /tmp/genders.ts# 4) Data: countries (English, ISO-3166)if ! grep -q '"world-countries"' package.json 2>/dev/null; then

  corepack enable >/dev/null 2>&1 || true

  pnpm add world-countries >/dev/null 2>&1 || npm i world-countries --no-audit --no-fund >/dev/null 2>&1ficat > /tmp/countries.ts <<'TS'

import countries from "world-countries";export type Country = { code: string; name: string };export const COUNTRIES: Country[] = countries.map((c: any) => ({ code: c.cca2, name: c.name?.common || "" }))

  .filter(c => c.code && c.name)

  .sort((a,b)=> a.name.localeCompare(b.name));export const ALL_COUNTRIES_OPTION: Country = { code: "ALL", name: "All Countries" };

TS

upsert "src/data/countries.ts" /tmp/countries.ts# 5) .gitignore (لمنع دفع الأرشيفات والنسخ)if [[ -f .gitignore ]]; then mkdir -p "$BK/git"; cp -a .gitignore "$BK/git/.gitignore.bak"; ficat > /tmp/gitignore.append <<'GI'# --- DitonaChat ops (agent-safe) ---

_ops/artifacts/

_ops/backups/

_ops/snapshots/

*.log

dist/

build/

GItouch .gitignorewhile read -r line; do [[ -z "$line" ]] && continue; grep -qxF "$line" .gitignore || echo "$line" >> .gitignore; done < /tmp/gitignore.append# 6) مؤشرات قبولexists(){ [[ -e "$1" ]] && echo 1 || echo 0; }

VAPI=$(exists "src/app/api/user/vip-status/route.ts")

GEND=$(exists "src/data/genders.ts")

CNTR=$(exists "src/data/countries.ts")

SLICE=$(grep -RIn 'slice(-3)' src/components/chat 2>/dev/null | head -1 | awk -F: '{print $1":L"$2}')

QDOCK=$(grep -RIn 'className="absolute right-3 -top-24 z-\[40\]"' src/app/chat/ChatClient.tsx 2>/dev/null | head -1 | awk -F: '{print $1":L"$2}')

HVLN=$(grep -RIn 'H_THRESHOLD|V_THRESHOLD' src/utils 2>/dev/null | awk -F: '{printf "%s:L%s,", $1,$2}' | sed 's/,$//')echo "-- Acceptance --"echo "ROOT=$(pwd)"echo "BACKUP_DIR=$BK"echo "CHANGED_COUNT=${#changed[@]} CHANGED_LIST=${changed[*]:-NONE}"echo "ARTIFACTS=vip_status_api:$VAPI genders:$GEND countries:$CNTR"echo "FEATURES=slice(-3):${SLICE:-NONE}; quick_dock:${QDOCK:-NONE}; media_thresholds:${HVLN:-NONE}"echo "LANG_DEFAULT=en WORLD=ISO-3166 dataset ready"echo "NOTES=P0 applied safely"echo "-- End Acceptance --"

BASH

bash /tmp/10_p0_apply_english_world.sh

2) تشغيل dev على 3000 للمعاينة



cat > /tmp/20_dev_preview_3000.sh <<'BASH'#!/usr/bin/env bashset -euo pipefailtrap 'echo; read -r -p "HOLD: اضغط Enter للإنهاء..." _' EXIT

ROOT="/home/runner/workspace"; cd "$ROOT"

fuser -k 3000/tcp 2>/dev/null || true; pkill -f "next dev" 2>/dev/null || true

corepack enable >/dev/null 2>&1 || true

pnpm exec next dev -p 3000 -H 0.0.0.0 &sleep 6# قد تمنع Replit curl أحيانًا؛ نحاول بلطف

VS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/user/vip-status || echo "n/a")

HL=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/_health || echo "n/a")echo "-- Acceptance --"echo "ROOT=$(pwd)"echo "RUN_MODE=dev PORT=3000"echo "CHECKS=/api/user/vip-status:$VS /api/_health:$HL (visual check in Preview mandatory)"echo "VISUAL=/, /chat, /plans should open"echo "-- End Acceptance --"

BASH

bash /tmp/20_dev_preview_3000.sh

المطلوب من الـAgent بصريًا الآن: افتح Preview على 3000 وتأكد أن:



/ و/chat و/plans تفتح بدون أخطاء Overlay.

GET /api/user/vip-status يعيد JSON في المتصفح.

3) تقرير تنفيذ آلي (Markdown) — مع لقطات



cat > /tmp/90_finalize_agent_report.sh <<'BASH'#!/usr/bin/env bashset -euo pipefailtrap 'echo; read -r -p "HOLD: اضغط Enter للإنهاء..." _' EXITcd /home/runner/workspace

TS="$(date -u +%Y%m%d-%H%M%S)"

OUT="_ops/reports/AGENT_BATCH_V1_${TS}.md"; mkdir -p "$(dirname "$OUT")"

VIP=$(curl -sSf http://localhost:3000/api/user/vip-status || echo '{"error":"preview-blocked"}')

HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/_health || echo "n/a")cat > "$OUT" <<MD

# Agent Batch v1 — English + World + VIP Status  (${TS})



## Changes

- Added \`/api/user/vip-status\` (static JSON).

- Added \`src/data/genders.ts\`.

- Added \`src/data/countries.ts\` (via \`world-countries\`).

- Updated \`.gitignore\` to exclude ops artifacts/backups.



## Verifications

- VIP status API: \`${VIP}\`

- Health endpoint code: \`${HEALTH}\`

- Visual checklist (attach screenshots):

  - Home / ✅

  - /chat ✅ (no error overlay)

  - /plans ✅

  - /api/user/vip-status ✅ JSON 200



## Next steps (suggested)

- Wire Filters UI (Gender/Countries) with VIP gating.

- Dynamic PeerHeader + badges.

- Stripe test flow (checkout → webhook → VIP flip).

MDecho "-- Acceptance --"echo "ROOT=$(pwd)"echo "REPORT_FILE=$OUT"echo "NOTES=Attach screenshots from Preview to the report"echo "-- End Acceptance --"

BASH

bash /tmp/90_finalize_agent_report.sh ****** في كل المشروع والموقع  يجب ان يبدو الجنس عند ظهوره في الاماكن التي يجب ان يظهر بها بهذا الشكل Male: ♂️ باللون الأزرق الداكن.

Female: ♀️ باللون الأحمر الفاقع.

Couple: 💑 باللون الأحمر.

LGBT: 🌈 بألوان قوس قزح.     احرص ان هكذا مثال { اللون الأحمر الفاقع♀️ Female }