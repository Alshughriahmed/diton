üöÄ Agent Batch v3 ‚Äî Chat UI Polish (Anchors + Overlays + Toolbar)

ŸÜŸÅŸëÿ∞ ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿ®ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ®. ŸÉŸÑ ÿ≥ŸÉÿ±ÿ®ÿ™ Ÿäÿ∑ÿ®ÿπ Acceptance ŸàŸäŸÇŸÅ ÿπŸÑŸâ HOLD.

0) Assert ROOT (sanity)
cat > /tmp/00_assert_root_v3.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
trap 'echo; read -r -p "HOLD: ÿßÿ∂ÿ∫ÿ∑ Enter ŸÑŸÑÿ•ŸÜŸáÿßÿ°..." _' EXIT
ROOT="/home/runner/workspace"; cd "$ROOT"
exists(){ [[ -e "$1" ]] && echo 1 || echo 0; }
echo "-- Acceptance --"
echo "ROOT=$(pwd)"
echo "LIVE=src:$(exists src) package.json:$(exists package.json) next.config.mjs:$(exists next.config.mjs) tsconfig.json:$(exists tsconfig.json)"
echo "NOTES=Batch v3 will modify Chat UI only (safe/idempotent)"
echo "-- End Acceptance --"
BASH
bash /tmp/00_assert_root_v3.sh

1) Chat UI Components (overlays + toolbar + user controls)
cat > /tmp/10_chat_ui_components_v3.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
trap 'echo; read -r -p "HOLD: ÿßÿ∂ÿ∫ÿ∑ Enter ŸÑŸÑÿ•ŸÜŸáÿßÿ°..." _' EXIT
cd /home/runner/workspace
UTC="$(date -u +%Y%m%d-%H%M%S)"
BK="_ops/backups/batch_v3_${UTC}"; mkdir -p "$BK"; changed=()
upsert(){ tgt="$1"; tmp="$2"; if [[ -f "$tgt" ]]; then if cmp -s "$tgt" "$tmp"; then rm -f "$tmp"; else mkdir -p "$(dirname "$BK/$tgt")"; cp -a "$tgt" "$BK/$tgt"; mv "$tmp" "$tgt"; changed+=("$tgt"); fi else mkdir -p "$(dirname "$tgt")"; mv "$tmp" "$tgt"; changed+=("$tgt"); fi }

# 1) Peer badge (top-left, upper section)
mkdir -p src/components/chat
cat > /tmp/PeerBadgeTopLeft.tsx <<'TSX'
"use client";
type Props = {
  avatarUrl?: string;
  name?: string;
  likes?: number;
  isVip?: boolean;
};
export default function PeerBadgeTopLeft({ avatarUrl, name="Guest", likes=0, isVip=false }: Props){
  return (
    <div className="absolute left-3 top-3 z-[40] flex items-center gap-3 rounded-xl bg-black/50 backdrop-blur px-3 py-2 border border-white/10">
      <img src={avatarUrl || "/avatar.svg"} alt="Avatar" className="w-8 h-8 rounded-full object-cover" />
      <div className="flex flex-col leading-tight">
        <span className="text-sm font-medium">{name}</span>
        <span className="text-[11px] opacity-70">‚ù§ {likes} {isVip && <span className="ml-1 px-1 py-[1px] text-[10px] rounded bg-yellow-500/20 border border-yellow-500/40">VIP</span>}</span>
      </div>
    </div>
  );
}
TSX
upsert "src/components/chat/PeerBadgeTopLeft.tsx" /tmp/PeerBadgeTopLeft.tsx

# 2) Peer meta (bottom-left, country/city/gender)
cat > /tmp/PeerMetaBottomLeft.tsx <<'TSX'
"use client";
type Props = { country?: string; city?: string; gender?: string };
export default function PeerMetaBottomLeft({ country="Unknown", city="‚Äî", gender="‚Äî" }: Props){
  return (
    <div className="absolute left-3 bottom-3 z-[40] rounded-xl bg-black/50 backdrop-blur px-3 py-2 border border-white/10 text-sm">
      <div className="opacity-80">{country}{city ? ` ‚Ä¢ ${city}` : ""}</div>
      <div className="opacity-60 text-[12px]">{gender}</div>
    </div>
  );
}
TSX
upsert "src/components/chat/PeerMetaBottomLeft.tsx" /tmp/PeerMetaBottomLeft.tsx

# 3) User controls (top-right, lower section): camera switch + beauty + VIP badge
cat > /tmp/UserTopRightControls.tsx <<'TSX'
"use client";
import { useEffect, useState } from "react";
export default function UserTopRightControls(){
  const [isVip,setIsVip]=useState(false);
  useEffect(()=>{(async()=>{
    try { const r=await fetch("/api/user/vip-status",{cache:"no-store"}); const j=await r.json(); setIsVip(!!j?.isVip); } catch { setIsVip(false); }
  })();},[]);
  return (
    <div className="absolute right-3 top-[52%] z-[40] flex items-center gap-2">
      <button className="px-2 py-1 rounded-md bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Switch camera">Switch Cam</button>
      <button className="px-2 py-1 rounded-md bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Beauty filter">Beauty</button>
      <span className={`text-[11px] px-2 py-[2px] rounded border ${isVip? "bg-yellow-500/20 border-yellow-500/40":"bg-neutral-800 border-neutral-700"}`}>{isVip? "VIP":"Guest"}</span>
    </div>
  );
}
TSX
upsert "src/components/chat/UserTopRightControls.tsx" /tmp/UserTopRightControls.tsx

# 4) Bottom toolbar (fixed relative to chat container)
cat > /tmp/ChatToolbar.tsx <<'TSX'
"use client";
export default function ChatToolbar(){
  return (
    <div className="absolute left-0 right-0 bottom-0 z-[35] px-4 pb-3 pt-2">
      <div className="mx-auto max-w-5xl rounded-2xl bg-black/50 backdrop-blur border border-white/10">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center gap-2">
            <button className="px-3 py-2 rounded-lg bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Toggle Video">Video</button>
            <button className="px-3 py-2 rounded-lg bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Toggle Mic">Mic</button>
          </div>
          <div className="flex items-center gap-2">
            <button className="px-3 py-2 rounded-lg bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Report">Report</button>
            <button className="px-3 py-2 rounded-lg bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Settings">Settings</button>
          </div>
          <div className="flex items-center gap-2">
            <button className="px-3 py-2 rounded-lg bg-neutral-800 text-white text-sm border border-neutral-700" aria-label="Prev">Prev</button>
            <button className="px-3 py-2 rounded-lg bg-emerald-600 text-white text-sm border border-emerald-500" aria-label="Next">Next</button>
          </div>
        </div>
      </div>
    </div>
  );
}
TSX
upsert "src/components/chat/ChatToolbar.tsx" /tmp/ChatToolbar.tsx

# 5) Acceptance
exists(){ [[ -e "$1" ]] && echo 1 || echo 0; }
echo "-- Acceptance --"
echo "ROOT=$(pwd)"
echo "BACKUP_DIR=$BK"
echo "CHANGED_LIST=${changed[*]:-NONE}"
echo "FILES=PeerBadgeTL:$(exists src/components/chat/PeerBadgeTopLeft.tsx) PeerMetaBL:$(exists src/components/chat/PeerMetaBottomLeft.tsx) UserCtrlTR:$(exists src/components/chat/UserTopRightControls.tsx) Toolbar:$(exists src/components/chat/ChatToolbar.tsx)"
echo "NOTES=Components ready; next step: wire into ChatClient.tsx"
echo "-- End Acceptance --"
BASH
bash /tmp/10_chat_ui_components_v3.sh

2) Wiring + Quick Dock Anchor (idempotent)
cat > /tmp/20_wire_chat_ui_v3.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
trap 'echo; read -r -p "HOLD: ÿßÿ∂ÿ∫ÿ∑ Enter ŸÑŸÑÿ•ŸÜŸáÿßÿ°..." _' EXIT
cd /home/runner/workspace
FILE="src/app/chat/ChatClient.tsx"
BKDIR="_ops/backups/wire_chat_ui_v3_$(date -u +%Y%m%d-%H%M%S)"; mkdir -p "$BKDIR"
wired=0; imported=0; injected_anchor=0; injected_ui=0

if [[ -f "$FILE" ]]; then
  cp -a "$FILE" "$BKDIR/ChatClient.tsx.bak"
  # imports
  if ! grep -q 'components/chat/PeerBadgeTopLeft' "$FILE"; then
    awk 'NR==1{print; print "import PeerBadgeTopLeft from \"@/components/chat/PeerBadgeTopLeft\";"; next}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"; imported=1
  fi
  if ! grep -q 'components/chat/PeerMetaBottomLeft' "$FILE"; then
    awk 'NR==1{print; print "import PeerMetaBottomLeft from \"@/components/chat/PeerMetaBottomLeft\";"; next}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"; imported=1
  fi
  if ! grep -q 'components/chat/UserTopRightControls' "$FILE"; then
    awk 'NR==1{print; print "import UserTopRightControls from \"@/components/chat/UserTopRightControls\";"; next}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"; imported=1
  fi
  if ! grep -q 'components/chat/ChatToolbar' "$FILE"; then
    awk 'NR==1{print; print "import ChatToolbar from \"@/components/chat/ChatToolbar\";"; next}1' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"; imported=1
  fi
  # Quick Dock anchor (upper section top-right)
  if ! grep -q 'data-testid="quick-dock-anchor"' "$FILE"; then
    sed -i '0,/<div/{s//&\n      <div className="absolute right-3 -top-24 z-[40]" data-testid="quick-dock-anchor"><\/div>\n/}' "$FILE" || true
  fi
  grep -q 'data-testid="quick-dock-anchor"' "$FILE" && injected_anchor=1

  # Inject overlays & toolbar once
  if ! grep -q '<PeerBadgeTopLeft' "$FILE"; then
    sed -i '0,/<div/{s//&\n      <PeerBadgeTopLeft \/>\n      <PeerMetaBottomLeft \/>\n      <UserTopRightControls \/>\n      <ChatToolbar \/>\n/}' "$FILE" || true
  fi
  grep -q '<PeerBadgeTopLeft' "$FILE" && grep -q '<ChatToolbar' "$FILE" && injected_ui=1

  # verdict
  [[ $injected_anchor -eq 1 && $injected_ui -eq 1 ]] && wired=1
fi

echo "-- Acceptance --"
echo "ROOT=$(pwd)"
echo "TARGET=$FILE"
echo "IMPORTED=$imported ANCHOR=$injected_anchor UI_INJECTED=$injected_ui WIRED=$wired"
echo "QUICK_DOCK_ANCHOR_LINE=$(grep -n 'quick-dock-anchor' \"$FILE\" | head -1 | awk -F: '{print \"L\"$1}')"
echo "USAGE_LINES=$(grep -n '<PeerBadgeTopLeft\\|<PeerMetaBottomLeft\\|<UserTopRightControls\\|<ChatToolbar' \"$FILE\" | awk -F: '{printf \"%s:L%s,\",$1,$2}' | sed 's/,$//')"
echo "NOTES=Positioning is absolute; adjust later if needed after visual check"
echo "-- End Acceptance --"
BASH
bash /tmp/20_wire_chat_ui_v3.sh

3) Dev Preview ÿπŸÑŸâ 3000 + ŸÅÿ≠Ÿàÿµ ÿ≥ÿ±Ÿäÿπÿ©
cat > /tmp/30_preview_v3_3000.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
trap 'echo; read -r -p "HOLD: ÿßÿ∂ÿ∫ÿ∑ Enter ŸÑŸÑÿ•ŸÜŸáÿßÿ°..." _' EXIT
cd /home/runner/workspace
fuser -k 3000/tcp 2>/dev/null || true; pkill -f "next dev" 2>/dev/null || true
corepack enable >/dev/null 2>&1 || true
pnpm exec next dev -p 3000 -H 0.0.0.0 &
sleep 7
H=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/_health || echo "n/a")
V=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/user/vip-status || echo "n/a")
echo "-- Acceptance --"
echo "ROOT=$(pwd)"
echo "RUN_MODE=dev PORT=3000"
echo "CHECKS=/api/_health:$H /api/user/vip-status:$V"
echo "VISUAL=Open /chat ‚Üí see: PeerBadge TL, PeerMeta BL, UserControls TR (lower-half), ChatToolbar bottom, FilterBar top-right"
echo "-- End Acceptance --"
BASH
bash /tmp/30_preview_v3_3000.sh

4) ÿ™ŸÇÿ±Ÿäÿ± ŸÜŸáÿßÿ¶Ÿä (Markdown) ‚Äî ŸÖÿß ÿßŸÑÿ∞Ÿä ÿ™ÿ∫ŸäŸëÿ± + ŸÖÿß ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ÿ®ÿµÿ±ŸäŸãÿß
cat > /tmp/90_report_batch_v3.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
trap 'echo; read -r -p "HOLD: ÿßÿ∂ÿ∫ÿ∑ Enter ŸÑŸÑÿ•ŸÜŸáÿßÿ°..." _' EXIT
cd /home/runner/workspace
TS="$(date -u +%Y%m%d-%H%M%S)"
OUT="_ops/reports/AGENT_BATCH_V3_${TS}.md"; mkdir -p "$(dirname "$OUT")"

HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/_health || echo "n/a")
VIP=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/user/vip-status || echo "n/a")

WIRE=$(grep -RIn 'quick-dock-anchor' src/app/chat/ChatClient.tsx 2>/dev/null | head -1 || echo "not-found")
UIX=$(grep -RIn '<PeerBadgeTopLeft\\|<PeerMetaBottomLeft\\|<UserTopRightControls\\|<ChatToolbar' src/app/chat/ChatClient.tsx 2>/dev/null | paste -sd',' -)

cat > "$OUT" <<MD
# Agent Batch v3 ‚Äî Chat UI Polish (${TS})

## Changes
- Added **Chat UI overlays**:
  - \`PeerBadgeTopLeft\` (avatar/name/likes/VIP).
  - \`PeerMetaBottomLeft\` (country/city/gender placeholders).
  - \`UserTopRightControls\` (Switch Cam / Beauty / VIP badge).
  - \`ChatToolbar\` (bottom controls: Video/Mic/Report/Settings/Prev/Next).
- Ensured **Quick Dock anchor** in \`ChatClient.tsx\` (data-testid="quick-dock-anchor").

## Wiring
- Anchor: \`${WIRE}\`
- Inserted components at: \`${UIX}\`

## Quick checks
- /api/_health ‚Üí \`${HEALTH}\`
- /api/user/vip-status ‚Üí \`${VIP}\`

## Visual checklist (attach screenshots)
- /chat shows:
  - FilterBar (top-right, upper section).
  - PeerBadge (top-left, upper section).
  - PeerMeta (bottom-left, upper section).
  - User controls (top-right, lower section).
  - ChatToolbar (bottom).

## Notes
- Positions use **absolute** classes; fine-tune offsets after visual review.
- 50/50 layout can be refined in next batch after we inspect actual DOM containers.
MD

echo "-- Acceptance --"
echo "ROOT=$(pwd)"
echo "REPORT_FILE=$OUT"
echo "NOTES=Attach screenshots from Preview (/chat) to confirm positions"
echo "-- End Acceptance --"
BASH
bash /tmp/90_report_batch_v3.sh
